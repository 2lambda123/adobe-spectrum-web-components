{"version":3,"file":"c11d2df4.js","sources":["../../../node_modules/@lit-labs/virtualizer/layouts/shared/SizeCache.js","../../../node_modules/@lit-labs/virtualizer/polyfillLoaders/EventTarget.js","../../../node_modules/@lit-labs/virtualizer/layouts/flow.js","../../../node_modules/@lit-labs/virtualizer/layouts/shared/BaseLayout.js"],"sourcesContent":["export class SizeCache {\n    constructor(config) {\n        this._map = new Map();\n        this._roundAverageSize = true;\n        this.totalSize = 0;\n        if ((config === null || config === void 0 ? void 0 : config.roundAverageSize) === false) {\n            this._roundAverageSize = false;\n        }\n    }\n    set(index, value) {\n        const prev = this._map.get(index) || 0;\n        this._map.set(index, value);\n        this.totalSize += value - prev;\n    }\n    get averageSize() {\n        if (this._map.size > 0) {\n            const average = this.totalSize / this._map.size;\n            return this._roundAverageSize ? Math.round(average) : average;\n        }\n        return 0;\n    }\n    getSize(index) {\n        return this._map.get(index);\n    }\n    clear() {\n        this._map.clear();\n        this.totalSize = 0;\n    }\n}\n//# sourceMappingURL=SizeCache.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nlet _ET;\nlet ET;\nexport default async function EventTarget() {\n    return ET || init();\n}\nasync function init() {\n    _ET = window.EventTarget;\n    try {\n        new _ET();\n    }\n    catch {\n        _ET = (await import('event-target-shim')).EventTarget;\n    }\n    return (ET = _ET);\n}\n//# sourceMappingURL=EventTarget.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { SizeCache } from './shared/SizeCache.js';\nimport { BaseLayout, dim1 } from './shared/BaseLayout.js';\nexport const flow = (config) => Object.assign({\n    type: FlowLayout,\n}, config);\nfunction leadingMargin(direction) {\n    return direction === 'horizontal' ? 'marginLeft' : 'marginTop';\n}\nfunction trailingMargin(direction) {\n    return direction === 'horizontal' ? 'marginRight' : 'marginBottom';\n}\nfunction offset(direction) {\n    return direction === 'horizontal' ? 'xOffset' : 'yOffset';\n}\nfunction collapseMargins(a, b) {\n    const m = [a, b].sort();\n    return m[1] <= 0 ? Math.min(...m) : m[0] >= 0 ? Math.max(...m) : m[0] + m[1];\n}\nclass MetricsCache {\n    constructor() {\n        this._childSizeCache = new SizeCache();\n        this._marginSizeCache = new SizeCache();\n        this._metricsCache = new Map();\n    }\n    update(metrics, direction) {\n        var _a, _b;\n        const marginsToUpdate = new Set();\n        Object.keys(metrics).forEach((key) => {\n            const k = Number(key);\n            this._metricsCache.set(k, metrics[k]);\n            this._childSizeCache.set(k, metrics[k][dim1(direction)]);\n            marginsToUpdate.add(k);\n            marginsToUpdate.add(k + 1);\n        });\n        for (const k of marginsToUpdate) {\n            const a = ((_a = this._metricsCache.get(k)) === null || _a === void 0 ? void 0 : _a[leadingMargin(direction)]) || 0;\n            const b = ((_b = this._metricsCache.get(k - 1)) === null || _b === void 0 ? void 0 : _b[trailingMargin(direction)]) || 0;\n            this._marginSizeCache.set(k, collapseMargins(a, b));\n        }\n    }\n    get averageChildSize() {\n        return this._childSizeCache.averageSize;\n    }\n    get totalChildSize() {\n        return this._childSizeCache.totalSize;\n    }\n    get averageMarginSize() {\n        return this._marginSizeCache.averageSize;\n    }\n    get totalMarginSize() {\n        return this._marginSizeCache.totalSize;\n    }\n    getLeadingMarginValue(index, direction) {\n        var _a;\n        return ((_a = this._metricsCache.get(index)) === null || _a === void 0 ? void 0 : _a[leadingMargin(direction)]) || 0;\n    }\n    getChildSize(index) {\n        return this._childSizeCache.getSize(index);\n    }\n    getMarginSize(index) {\n        return this._marginSizeCache.getSize(index);\n    }\n    clear() {\n        this._childSizeCache.clear();\n        this._marginSizeCache.clear();\n        this._metricsCache.clear();\n    }\n}\nexport class FlowLayout extends BaseLayout {\n    constructor() {\n        super(...arguments);\n        /**\n         * Initial estimate of item size\n         */\n        this._itemSize = { width: 100, height: 100 };\n        /**\n         * Indices of children mapped to their (position and length) in the scrolling\n         * direction. Used to keep track of children that are in range.\n         */\n        this._physicalItems = new Map();\n        /**\n         * Used in tandem with _physicalItems to track children in range across\n         * reflows.\n         */\n        this._newPhysicalItems = new Map();\n        /**\n         * Width and height of children by their index.\n         */\n        this._metricsCache = new MetricsCache();\n        /**\n         * anchorIdx is the anchor around which we reflow. It is designed to allow\n         * jumping to any point of the scroll size. We choose it once and stick with\n         * it until stable. _first and _last are deduced around it.\n         */\n        this._anchorIdx = null;\n        /**\n         * Position in the scrolling direction of the anchor child.\n         */\n        this._anchorPos = null;\n        /**\n         * Whether all children in range were in range during the previous reflow.\n         */\n        this._stable = true;\n        this._measureChildren = true;\n        this._estimate = true;\n    }\n    // protected _defaultConfig: BaseLayoutConfig = Object.assign({}, super._defaultConfig, {\n    // })\n    // constructor(config: Layout1dConfig) {\n    //   super(config);\n    // }\n    get measureChildren() {\n        return this._measureChildren;\n    }\n    /**\n     * Determine the average size of all children represented in the sizes\n     * argument.\n     */\n    updateItemSizes(sizes) {\n        this._metricsCache.update(sizes, this.direction);\n        // if (this._nMeasured) {\n        // this._updateItemSize();\n        this._scheduleReflow();\n        // }\n    }\n    /**\n     * Set the average item size based on the total length and number of children\n     * in range.\n     */\n    // _updateItemSize() {\n    //   // Keep integer values.\n    //   this._itemSize[this._sizeDim] = this._metricsCache.averageChildSize;\n    // }\n    _getPhysicalItem(idx) {\n        var _a;\n        return (_a = this._newPhysicalItems.get(idx)) !== null && _a !== void 0 ? _a : this._physicalItems.get(idx);\n    }\n    _getSize(idx) {\n        const item = this._getPhysicalItem(idx);\n        return item && this._metricsCache.getChildSize(idx);\n    }\n    _getAverageSize() {\n        return this._metricsCache.averageChildSize || this._itemSize[this._sizeDim];\n    }\n    /**\n     * Returns the position in the scrolling direction of the item at idx.\n     * Estimates it if the item at idx is not in the DOM.\n     */\n    _getPosition(idx) {\n        var _a;\n        const item = this._getPhysicalItem(idx);\n        const { averageMarginSize } = this._metricsCache;\n        return idx === 0\n            ? (_a = this._metricsCache.getMarginSize(0)) !== null && _a !== void 0 ? _a : averageMarginSize\n            : item\n                ? item.pos\n                : averageMarginSize + idx * (averageMarginSize + this._getAverageSize());\n    }\n    _calculateAnchor(lower, upper) {\n        if (lower <= 0) {\n            return 0;\n        }\n        if (upper > this._scrollSize - this._viewDim1) {\n            return this._totalItems - 1;\n        }\n        return Math.max(0, Math.min(this._totalItems - 1, Math.floor((lower + upper) / 2 / this._delta)));\n    }\n    _getAnchor(lower, upper) {\n        if (this._physicalItems.size === 0) {\n            return this._calculateAnchor(lower, upper);\n        }\n        if (this._first < 0) {\n            console.error('_getAnchor: negative _first');\n            return this._calculateAnchor(lower, upper);\n        }\n        if (this._last < 0) {\n            console.error('_getAnchor: negative _last');\n            return this._calculateAnchor(lower, upper);\n        }\n        const firstItem = this._getPhysicalItem(this._first), lastItem = this._getPhysicalItem(this._last), firstMin = firstItem.pos, lastMin = lastItem.pos, lastMax = lastMin + this._metricsCache.getChildSize(this._last);\n        if (lastMax < lower) {\n            // Window is entirely past physical items, calculate new anchor\n            return this._calculateAnchor(lower, upper);\n        }\n        if (firstMin > upper) {\n            // Window is entirely before physical items, calculate new anchor\n            return this._calculateAnchor(lower, upper);\n        }\n        // Window contains a physical item\n        // Find one, starting with the one that was previously first visible\n        let candidateIdx = this._firstVisible - 1;\n        let cMax = -Infinity;\n        while (cMax < lower) {\n            const candidate = this._getPhysicalItem(++candidateIdx);\n            cMax = candidate.pos + this._metricsCache.getChildSize(candidateIdx);\n        }\n        return candidateIdx;\n    }\n    /**\n     * Updates _first and _last based on items that should be in the current\n     * viewed range.\n     */\n    _getActiveItems() {\n        if (this._viewDim1 === 0 || this._totalItems === 0) {\n            this._clearItems();\n        }\n        else {\n            this._getItems();\n        }\n    }\n    /**\n     * Sets the range to empty.\n     */\n    _clearItems() {\n        this._first = -1;\n        this._last = -1;\n        this._physicalMin = 0;\n        this._physicalMax = 0;\n        const items = this._newPhysicalItems;\n        this._newPhysicalItems = this._physicalItems;\n        this._newPhysicalItems.clear();\n        this._physicalItems = items;\n        this._stable = true;\n    }\n    /*\n     * Updates _first and _last based on items that should be in the given range.\n     */\n    _getItems() {\n        var _a, _b;\n        const items = this._newPhysicalItems;\n        this._stable = true;\n        let lower, upper;\n        // The anchorIdx is the anchor around which we reflow. It is designed to\n        // allow jumping to any point of the scroll size. We choose it once and\n        // stick with it until stable. first and last are deduced around it.\n        // If we have a scrollToIndex, we anchor on the given\n        // index and set the scroll position accordingly\n        if (this._scrollToIndex >= 0) {\n            this._anchorIdx = Math.min(this._scrollToIndex, this._totalItems - 1);\n            this._anchorPos = this._getPosition(this._anchorIdx);\n            this._scrollIfNeeded();\n        }\n        // Determine the lower and upper bounds of the region to be\n        // rendered, relative to the viewport\n        lower = this._scrollPosition - this._overhang; //leadingOverhang;\n        upper = this._scrollPosition + this._viewDim1 + this._overhang; // trailingOverhang;\n        if (upper < 0 || lower > this._scrollSize) {\n            this._clearItems();\n            return;\n        }\n        // If we are scrolling to a specific index or if we are doing another\n        // pass to stabilize a previously started reflow, we will already\n        // have an anchor. If not, establish an anchor now.\n        if (this._anchorIdx === null || this._anchorPos === null) {\n            this._anchorIdx = this._getAnchor(lower, upper);\n            this._anchorPos = this._getPosition(this._anchorIdx);\n        }\n        let anchorSize = this._getSize(this._anchorIdx);\n        if (anchorSize === undefined) {\n            this._stable = false;\n            anchorSize = this._getAverageSize();\n        }\n        const anchorLeadingMargin = (_a = this._metricsCache.getMarginSize(this._anchorIdx)) !== null && _a !== void 0 ? _a : this._metricsCache.averageMarginSize;\n        const anchorTrailingMargin = (_b = this._metricsCache.getMarginSize(this._anchorIdx + 1)) !== null && _b !== void 0 ? _b : this._metricsCache.averageMarginSize;\n        if (this._anchorIdx === 0) {\n            this._anchorPos = anchorLeadingMargin;\n        }\n        if (this._anchorIdx === this._totalItems - 1) {\n            this._anchorPos = this._scrollSize - anchorTrailingMargin - anchorSize;\n        }\n        // Anchor might be outside bounds, so prefer correcting the error and keep\n        // that anchorIdx.\n        let anchorErr = 0;\n        if (this._anchorPos + anchorSize + anchorTrailingMargin < lower) {\n            anchorErr = lower - (this._anchorPos + anchorSize + anchorTrailingMargin);\n        }\n        if (this._anchorPos - anchorLeadingMargin > upper) {\n            anchorErr = upper - (this._anchorPos - anchorLeadingMargin);\n        }\n        if (anchorErr) {\n            this._scrollPosition -= anchorErr;\n            lower -= anchorErr;\n            upper -= anchorErr;\n            this._scrollError += anchorErr;\n        }\n        items.set(this._anchorIdx, { pos: this._anchorPos, size: anchorSize });\n        this._first = this._last = this._anchorIdx;\n        this._physicalMin = this._anchorPos - anchorLeadingMargin;\n        this._physicalMax = this._anchorPos + anchorSize + anchorTrailingMargin;\n        while (this._physicalMin > lower && this._first > 0) {\n            let size = this._getSize(--this._first);\n            if (size === undefined) {\n                this._stable = false;\n                size = this._getAverageSize();\n            }\n            let margin = this._metricsCache.getMarginSize(this._first);\n            if (margin === undefined) {\n                this._stable = false;\n                margin = this._metricsCache.averageMarginSize;\n            }\n            this._physicalMin -= size;\n            const pos = this._physicalMin;\n            items.set(this._first, { pos, size });\n            this._physicalMin -= margin;\n            if (this._stable === false && this._estimate === false) {\n                break;\n            }\n        }\n        while (this._physicalMax < upper && this._last < this._totalItems - 1) {\n            let size = this._getSize(++this._last);\n            if (size === undefined) {\n                this._stable = false;\n                size = this._getAverageSize();\n            }\n            let margin = this._metricsCache.getMarginSize(this._last);\n            if (margin === undefined) {\n                this._stable = false;\n                margin = this._metricsCache.averageMarginSize;\n            }\n            const pos = this._physicalMax;\n            items.set(this._last, { pos, size });\n            this._physicalMax += size + margin;\n            if (!this._stable && !this._estimate) {\n                break;\n            }\n        }\n        // This handles the cases where we were relying on estimated sizes.\n        const extentErr = this._calculateError();\n        if (extentErr) {\n            this._physicalMin -= extentErr;\n            this._physicalMax -= extentErr;\n            this._anchorPos -= extentErr;\n            this._scrollPosition -= extentErr;\n            items.forEach((item) => (item.pos -= extentErr));\n            this._scrollError += extentErr;\n        }\n        if (this._stable) {\n            this._newPhysicalItems = this._physicalItems;\n            this._newPhysicalItems.clear();\n            this._physicalItems = items;\n        }\n    }\n    _calculateError() {\n        if (this._first === 0) {\n            return this._physicalMin;\n        }\n        else if (this._physicalMin <= 0) {\n            return this._physicalMin - this._first * this._delta;\n        }\n        else if (this._last === this._totalItems - 1) {\n            return this._physicalMax - this._scrollSize;\n        }\n        else if (this._physicalMax >= this._scrollSize) {\n            return (this._physicalMax -\n                this._scrollSize +\n                (this._totalItems - 1 - this._last) * this._delta);\n        }\n        return 0;\n    }\n    // TODO: Can this be made to inherit from base, with proper hooks?\n    _reflow() {\n        const { _first, _last, _scrollSize } = this;\n        this._updateScrollSize();\n        this._getActiveItems();\n        if (this._scrollSize !== _scrollSize) {\n            this._emitScrollSize();\n        }\n        this._updateVisibleIndices();\n        this._emitRange();\n        if (this._first === -1 && this._last === -1) {\n            this._resetReflowState();\n        }\n        else if (this._first !== _first || this._last !== _last) {\n            this._emitChildPositions();\n            this._emitScrollError();\n        }\n        else {\n            this._emitChildPositions();\n            this._emitScrollError();\n            this._resetReflowState();\n        }\n    }\n    _resetReflowState() {\n        this._anchorIdx = null;\n        this._anchorPos = null;\n        this._stable = true;\n    }\n    _updateScrollSize() {\n        const { averageMarginSize } = this._metricsCache;\n        this._scrollSize = Math.max(1, this._totalItems * (averageMarginSize + this._getAverageSize()) +\n            averageMarginSize);\n    }\n    /**\n     * Returns the average size (precise or estimated) of an item in the scrolling direction,\n     * including any surrounding space.\n     */\n    get _delta() {\n        const { averageMarginSize } = this._metricsCache;\n        return this._getAverageSize() + averageMarginSize;\n    }\n    /**\n     * Returns the top and left positioning of the item at idx.\n     */\n    _getItemPosition(idx) {\n        var _a;\n        return {\n            [this._positionDim]: this._getPosition(idx),\n            [this._secondaryPositionDim]: 0,\n            [offset(this.direction)]: -((_a = this._metricsCache.getLeadingMarginValue(idx, this.direction)) !== null && _a !== void 0 ? _a : this._metricsCache.averageMarginSize),\n        };\n    }\n    /**\n     * Returns the height and width of the item at idx.\n     */\n    _getItemSize(idx) {\n        var _a;\n        return {\n            [this._sizeDim]: (this._getSize(idx) || this._getAverageSize()) +\n                ((_a = this._metricsCache.getMarginSize(idx + 1)) !== null && _a !== void 0 ? _a : this._metricsCache.averageMarginSize),\n            [this._secondarySizeDim]: this._itemSize[this._secondarySizeDim],\n        };\n    }\n    _viewDim2Changed() {\n        this._scheduleReflow();\n    }\n}\n//# sourceMappingURL=flow.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport EventTarget from '../../polyfillLoaders/EventTarget.js';\nexport function dim1(direction) {\n    return direction === 'horizontal' ? 'width' : 'height';\n}\nexport function dim2(direction) {\n    return direction === 'horizontal' ? 'height' : 'width';\n}\nexport function pos1(direction) {\n    return direction === 'horizontal' ? 'left' : 'top';\n}\nexport function pos2(direction) {\n    return direction === 'horizontal' ? 'top' : 'left';\n}\nexport class BaseLayout {\n    constructor(config) {\n        /**\n         * The last set viewport scroll position.\n         */\n        this._latestCoords = { left: 0, top: 0 };\n        /**\n         * Scrolling direction.\n         */\n        this._direction = null;\n        /**\n         * Dimensions of the viewport.\n         */\n        this._viewportSize = { width: 0, height: 0 };\n        /**\n         * Flag for debouncing asynchnronous reflow requests.\n         */\n        this._pendingReflow = false;\n        this._pendingLayoutUpdate = false;\n        /**\n         * Index of the item that has been scrolled to via the public API. When the\n         * viewport is otherwise scrolled, this value is set back to -1.\n         */\n        this._scrollToIndex = -1;\n        /**\n         * When a child is scrolled to, the offset from the top of the child and the\n         * top of the viewport. Value is a proportion of the item size.\n         */\n        this._scrollToAnchor = 0;\n        /**\n         * The index of the first item intersecting the viewport.\n         */\n        this._firstVisible = 0;\n        /**\n         * The index of the last item intersecting the viewport.\n         */\n        this._lastVisible = 0;\n        this._eventTargetPromise = EventTarget().then((Ctor) => {\n            this._eventTarget = new Ctor();\n        });\n        /**\n         * Pixel offset in the scroll direction of the first child.\n         */\n        this._physicalMin = 0;\n        /**\n         * Pixel offset in the scroll direction of the last child.\n         */\n        this._physicalMax = 0;\n        /**\n         * Index of the first child.\n         */\n        this._first = -1;\n        /**\n         * Index of the last child.\n         */\n        this._last = -1;\n        /**\n         * Length in the scrolling direction.\n         */\n        this._sizeDim = 'height';\n        /**\n         * Length in the non-scrolling direction.\n         */\n        this._secondarySizeDim = 'width';\n        /**\n         * Position in the scrolling direction.\n         */\n        this._positionDim = 'top';\n        /**\n         * Position in the non-scrolling direction.\n         */\n        this._secondaryPositionDim = 'left';\n        /**\n         * Current scroll offset in pixels.\n         */\n        this._scrollPosition = 0;\n        /**\n         * Difference between current scroll offset and scroll offset calculated due\n         * to a reflow.\n         */\n        this._scrollError = 0;\n        /**\n         * Total number of items that could possibly be displayed. Used to help\n         * calculate the scroll size.\n         */\n        this._totalItems = 0;\n        /**\n         * The total (estimated) length of all items in the scrolling direction.\n         */\n        this._scrollSize = 1;\n        /**\n         * Number of pixels beyond the viewport to still include\n         * in the active range of items.\n         */\n        // TODO (graynorton): Probably want to make this something we calculate based\n        // on viewport size, item size, other factors, possibly still with a dial of some kind\n        this._overhang = 1000;\n        this._eventTarget = null;\n        // Delay setting config so that subclasses do setup work first\n        Promise.resolve().then(() => (this.config = config || this._defaultConfig));\n    }\n    get _defaultConfig() {\n        return {\n            direction: 'vertical',\n        };\n    }\n    set config(config) {\n        Object.assign(this, Object.assign({}, this._defaultConfig, config));\n    }\n    get config() {\n        return {\n            direction: this.direction,\n        };\n    }\n    /**\n     * Maximum index of children + 1, to help estimate total height of the scroll\n     * space.\n     */\n    get totalItems() {\n        return this._totalItems;\n    }\n    set totalItems(num) {\n        const _num = Number(num);\n        if (_num !== this._totalItems) {\n            this._totalItems = _num;\n            this._scheduleReflow();\n        }\n    }\n    /**\n     * Primary scrolling direction.\n     */\n    get direction() {\n        return this._direction;\n    }\n    set direction(dir) {\n        // Force it to be either horizontal or vertical.\n        dir = dir === 'horizontal' ? dir : 'vertical';\n        if (dir !== this._direction) {\n            this._direction = dir;\n            this._sizeDim = dir === 'horizontal' ? 'width' : 'height';\n            this._secondarySizeDim = dir === 'horizontal' ? 'height' : 'width';\n            this._positionDim = dir === 'horizontal' ? 'left' : 'top';\n            this._secondaryPositionDim = dir === 'horizontal' ? 'top' : 'left';\n            this._triggerReflow();\n        }\n    }\n    /**\n     * Height and width of the viewport.\n     */\n    get viewportSize() {\n        return this._viewportSize;\n    }\n    set viewportSize(dims) {\n        const { _viewDim1, _viewDim2 } = this;\n        Object.assign(this._viewportSize, dims);\n        if (_viewDim2 !== this._viewDim2) {\n            // this._viewDim2Changed();\n            this._scheduleLayoutUpdate();\n        }\n        else if (_viewDim1 !== this._viewDim1) {\n            this._checkThresholds();\n        }\n    }\n    /**\n     * Scroll offset of the viewport.\n     */\n    get viewportScroll() {\n        return this._latestCoords;\n    }\n    set viewportScroll(coords) {\n        Object.assign(this._latestCoords, coords);\n        const oldPos = this._scrollPosition;\n        this._scrollPosition = this._latestCoords[this._positionDim];\n        if (oldPos !== this._scrollPosition) {\n            this._scrollPositionChanged(oldPos, this._scrollPosition);\n            this._updateVisibleIndices({ emit: true });\n        }\n        this._checkThresholds();\n    }\n    /**\n     * Perform a reflow if one has been scheduled.\n     */\n    reflowIfNeeded(force = false) {\n        if (force || this._pendingReflow) {\n            this._pendingReflow = false;\n            this._reflow();\n        }\n    }\n    /**\n     * Scroll to the child at the given index, and the given position within that\n     * child.\n     */\n    scrollToIndex(index, position = 'start') {\n        if (!Number.isFinite(index))\n            return;\n        index = Math.min(this.totalItems, Math.max(0, index));\n        this._scrollToIndex = index;\n        if (position === 'nearest') {\n            position = index > this._first + this._num / 2 ? 'end' : 'start';\n        }\n        switch (position) {\n            case 'start':\n                this._scrollToAnchor = 0;\n                break;\n            case 'center':\n                this._scrollToAnchor = 0.5;\n                break;\n            case 'end':\n                this._scrollToAnchor = 1;\n                break;\n            default:\n                throw new TypeError('position must be one of: start, center, end, nearest');\n        }\n        this._scheduleReflow();\n    }\n    async dispatchEvent(evt) {\n        await this._eventTargetPromise;\n        this._eventTarget.dispatchEvent(evt);\n    }\n    async addEventListener(type, listener, options) {\n        await this._eventTargetPromise;\n        this._eventTarget.addEventListener(type, listener, options);\n    }\n    async removeEventListener(type, callback, options) {\n        await this._eventTargetPromise;\n        this._eventTarget.removeEventListener(type, callback, options);\n    }\n    _updateLayout() {\n        // Override\n    }\n    // protected _viewDim2Changed(): void {\n    //   this._scheduleLayoutUpdate();\n    // }\n    /**\n     * The height or width of the viewport, whichever corresponds to the scrolling direction.\n     */\n    get _viewDim1() {\n        return this._viewportSize[this._sizeDim];\n    }\n    /**\n     * The height or width of the viewport, whichever does NOT correspond to the scrolling direction.\n     */\n    get _viewDim2() {\n        return this._viewportSize[this._secondarySizeDim];\n    }\n    _scheduleReflow() {\n        this._pendingReflow = true;\n    }\n    _scheduleLayoutUpdate() {\n        this._pendingLayoutUpdate = true;\n        this._scheduleReflow();\n    }\n    // For triggering a reflow based on incoming changes to\n    // the layout config.\n    _triggerReflow() {\n        this._scheduleLayoutUpdate();\n        // TODO graynorton@: reflowIfNeeded() isn't really supposed\n        // to be called internally. Address in larger cleanup\n        // of virtualizer / layout interaction pattern.\n        // this.reflowIfNeeded(true);\n        Promise.resolve().then(() => this.reflowIfNeeded());\n    }\n    _reflow() {\n        if (this._pendingLayoutUpdate) {\n            this._updateLayout();\n            this._pendingLayoutUpdate = false;\n        }\n        this._updateScrollSize();\n        this._getActiveItems();\n        this._scrollIfNeeded();\n        this._updateVisibleIndices();\n        this._emitScrollSize();\n        this._emitRange();\n        this._emitChildPositions();\n        this._emitScrollError();\n    }\n    _scrollIfNeeded() {\n        if (this._scrollToIndex === -1) {\n            return;\n        }\n        const index = this._scrollToIndex;\n        const anchor = this._scrollToAnchor;\n        const pos = this._getItemPosition(index)[this._positionDim];\n        const size = this._getItemSize(index)[this._sizeDim];\n        const curAnchorPos = this._scrollPosition + this._viewDim1 * anchor;\n        const newAnchorPos = pos + size * anchor;\n        // Ensure scroll position is an integer within scroll bounds.\n        const scrollPosition = Math.floor(Math.min(this._scrollSize - this._viewDim1, Math.max(0, this._scrollPosition - curAnchorPos + newAnchorPos)));\n        this._scrollError += this._scrollPosition - scrollPosition;\n        this._scrollPosition = scrollPosition;\n    }\n    _emitRange(inProps = undefined) {\n        const detail = Object.assign({\n            first: this._first,\n            last: this._last,\n            num: this._num,\n            firstVisible: this._firstVisible,\n            lastVisible: this._lastVisible,\n        }, inProps);\n        this.dispatchEvent(new CustomEvent('rangechange', { detail }));\n    }\n    _emitScrollSize() {\n        const detail = {\n            [this._sizeDim]: this._scrollSize,\n            [this._secondarySizeDim]: null,\n        };\n        this.dispatchEvent(new CustomEvent('scrollsizechange', { detail }));\n    }\n    _emitScrollError() {\n        if (this._scrollError) {\n            const detail = {\n                [this._positionDim]: this._scrollError,\n                [this._secondaryPositionDim]: 0,\n            };\n            this.dispatchEvent(new CustomEvent('scrollerrorchange', { detail }));\n            this._scrollError = 0;\n        }\n    }\n    /**\n     * Get or estimate the top and left positions of items in the current range.\n     * Emit an itempositionchange event with these positions.\n     */\n    _emitChildPositions() {\n        const detail = {};\n        for (let idx = this._first; idx <= this._last; idx++) {\n            detail[idx] = this._getItemPosition(idx);\n        }\n        this.dispatchEvent(new CustomEvent('itempositionchange', { detail }));\n    }\n    /**\n     * Number of items to display.\n     */\n    get _num() {\n        if (this._first === -1 || this._last === -1) {\n            return 0;\n        }\n        return this._last - this._first + 1;\n    }\n    _checkThresholds() {\n        if (this._viewDim1 === 0 && this._num > 0) {\n            this._scheduleReflow();\n        }\n        else {\n            const min = Math.max(0, this._scrollPosition - this._overhang);\n            const max = Math.min(this._scrollSize, this._scrollPosition + this._viewDim1 + this._overhang);\n            if (this._physicalMin > min || this._physicalMax < max) {\n                this._scheduleReflow();\n            }\n        }\n    }\n    /**\n     * Find the indices of the first and last items to intersect the viewport.\n     * Emit a visibleindiceschange event when either index changes.\n     */\n    _updateVisibleIndices(options) {\n        if (this._first === -1 || this._last === -1)\n            return;\n        let firstVisible = this._first;\n        while (firstVisible < this._last &&\n            Math.round(this._getItemPosition(firstVisible)[this._positionDim] +\n                this._getItemSize(firstVisible)[this._sizeDim]) <= Math.round(this._scrollPosition)) {\n            firstVisible++;\n        }\n        let lastVisible = this._last;\n        while (lastVisible > this._first &&\n            Math.round(this._getItemPosition(lastVisible)[this._positionDim]) >=\n                Math.round(this._scrollPosition + this._viewDim1)) {\n            lastVisible--;\n        }\n        if (firstVisible !== this._firstVisible ||\n            lastVisible !== this._lastVisible) {\n            this._firstVisible = firstVisible;\n            this._lastVisible = lastVisible;\n            if (options && options.emit) {\n                this._emitRange();\n            }\n        }\n    }\n    _scrollPositionChanged(oldPos, newPos) {\n        // When both values are bigger than the max scroll position, keep the\n        // current _scrollToIndex, otherwise invalidate it.\n        const maxPos = this._scrollSize - this._viewDim1;\n        if (oldPos < maxPos || newPos < maxPos) {\n            this._scrollToIndex = -1;\n        }\n    }\n}\n//# sourceMappingURL=BaseLayout.js.map"],"names":["SizeCache","constructor","config","this","_map","Map","_roundAverageSize","totalSize","roundAverageSize","set","index","value","prev","get","averageSize","size","average","Math","round","getSize","clear","_ET","ET","async","EventTarget","window","import","init","flow","Object","assign","type","FlowLayout","leadingMargin","direction","trailingMargin","collapseMargins","a","b","sort","m","min","max","MetricsCache","_childSizeCache","_marginSizeCache","_metricsCache","update","metrics","_a","_b","marginsToUpdate","keys","forEach","key","k","Number","dim1","add","averageChildSize","totalChildSize","averageMarginSize","totalMarginSize","getLeadingMarginValue","getChildSize","getMarginSize","BaseLayout","_latestCoords","left","top","_direction","_viewportSize","width","height","_pendingReflow","_pendingLayoutUpdate","_scrollToIndex","_scrollToAnchor","_firstVisible","_lastVisible","_eventTargetPromise","then","Ctor","_eventTarget","_physicalMin","_physicalMax","_first","_last","_sizeDim","_secondarySizeDim","_positionDim","_secondaryPositionDim","_scrollPosition","_scrollError","_totalItems","_scrollSize","_overhang","Promise","resolve","_defaultConfig","totalItems","num","_num","_scheduleReflow","dir","_triggerReflow","viewportSize","dims","_viewDim1","_viewDim2","_scheduleLayoutUpdate","_checkThresholds","viewportScroll","coords","oldPos","_scrollPositionChanged","_updateVisibleIndices","emit","reflowIfNeeded","force","_reflow","scrollToIndex","position","isFinite","TypeError","[object Object]","evt","dispatchEvent","listener","options","addEventListener","callback","removeEventListener","_updateLayout","_updateScrollSize","_getActiveItems","_scrollIfNeeded","_emitScrollSize","_emitRange","_emitChildPositions","_emitScrollError","anchor","pos","_getItemPosition","_getItemSize","curAnchorPos","newAnchorPos","floor","scrollPosition","inProps","detail","first","last","firstVisible","lastVisible","CustomEvent","idx","newPos","maxPos","super","arguments","_itemSize","_physicalItems","_newPhysicalItems","_anchorIdx","_anchorPos","_stable","_measureChildren","_estimate","measureChildren","updateItemSizes","sizes","_getPhysicalItem","_getSize","_getAverageSize","_getPosition","item","_calculateAnchor","lower","upper","_delta","_getAnchor","console","error","firstItem","lastItem","firstMin","candidateIdx","cMax","Infinity","_clearItems","_getItems","items","anchorSize","undefined","anchorLeadingMargin","anchorTrailingMargin","anchorErr","margin","extentErr","_calculateError","_resetReflowState","_viewDim2Changed"],"mappings":"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"}
(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{1002:function(e,t,o){var s={"./adding-component.md":1003,"./spectrum-config.md":1004};function n(e){var t=c(e);return o(t)}function c(e){if(!o.o(s,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return s[e]}n.keys=function(){return Object.keys(s)},n.resolve=c,e.exports=n,n.id=1002},1003:function(e,t){e.exports='<div class="spectrum-Article"><h1 class="spectrum-Heading1">Adding a New Component</h1></div> <p class="spectrum-Body3">This guide explains how to contribute the implementation of a Spectrum control to <sp-link href="https://github.com/adobe/spectrum-web-components">spectrum-web-components</sp-link></p> <p class="spectrum-Body3">The components in spectrum-web-components are based on the CSS definitions in <sp-link href="https://github.com/adobe/spectrum-css">spectrum-css</sp-link>. Typically, component implementations contain very little code. The CSS from the <code>spectrum-css</code> project typically specifies all of the presentation details.</p> <div class="headerContainer"><h1 class="spectrum-Heading2">What is a web component?</h1><sp-rule size="large"></sp-rule></div> <hr class="spectrum-Rule spectrum-Rule--large"> <p class="spectrum-Body3">According to <sp-link href="https://www.webcomponents.org/introduction">webcomponents.org</sp-link>, web components are:</p> <blockquote> <p class="spectrum-Body3">... a set of web platform APIs that allow you to create new custom, reusable, encapsulated HTML tags to use in web pages and web apps. Custom components and widgets build on the Web Component standards, will work across modern browsers, and can be used with any JavaScript library or framework that works with HTML.</p> </blockquote> <p class="spectrum-Body3">In order to add a new component to this library, you will need to develop a working knowledge of the following technologies:</p> <ul class="spectrum-Body3"> <li><sp-link href="https://github.com/adobe/spectrum-css">Spectrum CSS</sp-link>: A CSS implementation of the Spectrum design language</li> <li><sp-link href="https://developers.google.com/web/fundamentals/web-components/customelements">Web Components</sp-link>: Standards based method for adding new HTML tags to a browser</li> <li><sp-link href="https://developers.google.com/web/fundamentals/web-components/shadowdom">Shadow DOM</sp-link>: The part of the Web Component spec that allows for encapsulation of component styles and child nodes</li> <li><sp-link href="https://lit-element.polymer-project.org/guide">lit-element</sp-link>: A simple base class for creating fast, lightweight web components</li> <li><sp-link href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties">CSS custom properties</sp-link>: CSS variables that can be used throughout a document</li> <li><sp-link href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html">Typescript</sp-link>: A typesafe variant of JavaScript</li> </ul> <div class="headerContainer"><h1 class="spectrum-Heading2">Setting up the styling</h1><sp-rule size="large"></sp-rule></div> <hr class="spectrum-Rule spectrum-Rule--large"> <p class="spectrum-Body3">The most complicated part of implementing a Spectrum web component is getting the styles set up correctly. The <sp-link href="https://developers.google.com/web/fundamentals/web-components/shadowdom">shadow DOM</sp-link> is the heart of a web component. It isolates the component from the styles and DOM of the containing page. While this offers many benefits, it also means that we must structure our CSS very differently.</p> <p class="spectrum-Body3">The CSS from the <sp-link href="https://github.com/adobe/spectrum-css">spectrum-css</sp-link> project is intended to be installed globally on a web page. Using it in the context of a web component requires that we modify it. To facilitate that, this project comes with a <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/scripts/process-spectrum-postcss-plugin.js">config-driven processor</sp-link> that can transform the Spectrum CSS into a format that can be consumed in a web component.</p> <p class="spectrum-Body3">The first step is to create a directory and a <code>spectrum-config.js</code> file for your new component. This config file contains information about the structure of the web component in relation to the Spectrum CSS classes.</p> <p class="spectrum-Body3">Below is a fragment of the <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/src/button/spectrum-config.js"><code>spectrum-config.js</code> file for <code>sp-button</code></sp-link>.</p> <code-example class="language-javascript">module.exports = { spectrum: &#39;button&#39;, components: [ { name: &#39;button&#39;, host: { selector: &#39;.spectrum-Button&#39;, shadowSelector: &#39;#button&#39;, }, focus: &#39;#button&#39;, attributes: [ { type: &#39;boolean&#39;, selector: &#39;.spectrum-Button--quiet&#39;, }, { type: &#39;boolean&#39;, selector: &#39;:disabled&#39;, }, { type: &#39;enum&#39;, name: &#39;variant&#39;, values: [ &#39;.spectrum-Button--cta&#39;, &#39;.spectrum-Button--primary&#39;, &#39;.spectrum-Button--secondary&#39;, { name: &#39;negative&#39;, selector: &#39;.spectrum-Button--warning&#39;, }, &#39;.spectrum-Button--overBackground&#39;, &#39;.spectrum-Button--secondary&#39;, ], }, ], ids: [&#39;.spectrum-Button-label&#39;], slots: [ { name: &#39;icon&#39;, selector: &#39;.spectrum-Icon&#39;, }, ], exclude: [/\\.is-disabled/], }, ], };</code-example> <p class="spectrum-Body3">If we wanted to create a button component using this config file, the steps would be as follows:</p> <ol class="spectrum-Body3"> <li>Make the directory <sp-link href="https://github.com/adobe/spectrum-web-components/tree/master/src/button"><code>src/components/button</code></sp-link></li> <li>In that new directory, create a <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/src/button/spectrum-config.js"><code>spectrum-config.js</code></sp-link> file with the above contents</li> <li>Run the command <code>npm run process-spectrum</code> to create the <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/src/button/spectrum-button.css">CSS file</sp-link></li> </ol> <p class="spectrum-Body3">When you do the above, the <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/scripts/process-spectrum-postcss-plugin.js">config-driven processor</sp-link> will look in the <sp-link href="https://github.com/adobe/spectrum-css"><code>spectrum-css</code></sp-link> project for the <sp-link href="https://unpkg.com/@adobe/spectrum-css@2.13.0/dist/components/button/index-vars.css">matching CSS file</sp-link>. It will parse that file and restructure the CSS as per the configuration instructions.</p> <div class="headerContainer"><h1 class="spectrum-Heading2">Structure of a Spectrum Web Component</h1><sp-rule size="large"></sp-rule></div> <hr class="spectrum-Rule spectrum-Rule--large"> <p class="spectrum-Body3">If you look at an <code>sp-button</code> in the Chrome developer tools, you will see a DOM structure that looks like this.</p> <style>.indented{padding-left:50pt;padding-right:50pt}.dom-example{background-color:var(--spectrum-global-color-gray-50);max-width:100%;line-height:1.3em;padding:.75rem 1.5rem;box-shadow:0 0 18px rgba(0,0,0,.15);margin:1rem -4px 2rem;border-radius:6px;overflow:auto hidden;white-space:pre}.flip{display:inline-block;transform:scale(-1,1)}</style> <div class="dom-example"> &#x25BC;&lt;sp-button tabindex="0" variant="cta"&gt; &#x25BC; #shadow-root (open) &#x25BC; &lt;button id="button" tabindex="0"&gt; &#x25BC; &lt;div id="label&gt; &#x25BC; &lt;slot&gt; <div class="flip">&crarr;</div> #text &lt;/slot&gt; &lt;/div&gt; &lt;/button&gt; &#34;Click Me&#34; &lt;/sp-button&gt; </div> <p class="spectrum-Body3">If anything here looks unfamiliar, it is probably a good time to do some reading about <sp-link href="https://developers.google.com/web/fundamentals/web-components/customelements">web components</sp-link>.</p> <p class="spectrum-Body3">You can compare this markup with the <sp-link href="http://opensource.adobe.com/spectrum-css/2.13.0/docs/#button---cta">reference markup in the <code>spectrum-css</code> documentation</sp-link></p> <h3 id="host-class-mapping" class="spectrum-Heading3">Host Class Mapping</h3> <p class="spectrum-Body3">We need to determine what the main CSS class is for our component in the original <code>spectrum-css</code>. In the case of <code>sp-button</code>, we can see that the top-level class is <code>.Spectrum-Button</code>. We then need to determine where we want that CSS to be applied. In many cases, you will want that CSS to be applied to the actual web component via the <code>:host</code> selector. That is the default behaviour of the conversion script. In this case, we wanted to preserve all of the default behaviour of the <code>button</code> element in HTML. So, we want the main CSS to be applied to our <code>&lt;button&gt;</code> instead. If you look at the <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/src/button/spectrum-config.js#L18-L21"><code>host</code> definition in <code>spectrum-config.js</code></sp-link> you can see that we have supplied a <code>shadowSelector</code> option. That tells the script to move all of the CSS for <code>.Spectrum-Button</code> to the <code>#button</code> element in the shadow DOM.</p> <code-example class="language-javascript"> host: { selector: &#39;.spectrum-Button&#39;, shadowSelector: &#39;#button&#39;, },</code-example> <h3 id="shadow-dom-structure" class="spectrum-Heading3">Shadow DOM Structure</h3> <p class="spectrum-Body3">The next step is to fill out the remaining structure of the shadow DOM portion of the component. Note that, in the shadow DOM, we are using ids instead of long class names. We can do that because the namespace of each instance of our web component has it&#39;s own DOM scope. So, there can never be an id name collision.</p> <p class="spectrum-Body3">Typically, you will reference the <sp-link href="http://opensource.adobe.com/spectrum-css/2.13.0/docs/#checkbox">sample code from the <code>spectrum-css</code></sp-link> documentation and <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/src/checkbox/checkbox.ts#L30-L48">recreate that structure in the shadow DOM of your component</sp-link>.</p> <p class="spectrum-Body3">In the case of <code>sp-checkbox</code>, we turn this sample DOM code:</p> <code-example class="language-markup">&lt;label class=&quot;spectrum-Checkbox&quot;&gt; &lt;input type=&quot;checkbox&quot; class=&quot;spectrum-Checkbox-input&quot; id=&quot;checkbox-0&quot;&gt; &lt;span class=&quot;spectrum-Checkbox-box&quot;&gt; &lt;svg class=&quot;spectrum-Icon spectrum-UIIcon-CheckmarkSmall spectrum-Checkbox-checkmark&quot; focusable=&quot;false&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#spectrum-css-icon-CheckmarkSmall&quot; /&gt; &lt;/svg&gt; &lt;svg class=&quot;spectrum-Icon spectrum-UIIcon-DashSmall spectrum-Checkbox-partialCheckmark&quot; focusable=&quot;false&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#spectrum-css-icon-DashSmall&quot; /&gt; &lt;/svg&gt; &lt;/span&gt; &lt;span class=&quot;spectrum-Checkbox-label&quot;&gt;Checkbox&lt;/span&gt; &lt;/label&gt;</code-example> <p class="spectrum-Body3">into this code in our component&#39;s render method (actually implementation is slightly different):</p> <code-example class="language-javascript">return html` &lt;label id=&quot;root&quot;&gt; &lt;input id=&quot;input&quot; type=&quot;checkbox&quot; ?checked=${this.checked} @change=${this.handleChange} &lt;span id=&quot;box&quot;&gt; &lt;sp-icon id=&quot;checkmark&quot; size=&quot;s&quot; name=&quot;ui:CheckmarkSmall&quot; aria-hidden=&quot;true&quot; &gt;&lt;/sp-icon&gt; &lt;sp-icon id=&quot;partialCheckmark&quot; size=&quot;s&quot; name=&quot;ui:DashSmall&quot; aria-hidden=&quot;true&quot; &gt;&lt;/sp-icon&gt; &lt;/span&gt; &lt;span id=&quot;label&quot;&gt;&lt;slot&gt;&lt;/slot&gt;&lt;/span&gt; &lt;/label&gt; `;</code-example> <p class="spectrum-Body3">You will notice that many of the <code>spectrum-css</code> classes are mapped to ids in the web component. For example, <code>.spectrum-Checkbox-input</code> and <code>.spectrum-Checkbox-box</code> become <code>#input</code> and <code>#box</code>. Those transformations are described in the <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/src/checkbox/spectrum-config.js#L43-L64"><code>ids</code> section of the <code>spectrum-config.js</code> file</sp-link>.</p> <code-example class="language-javascript"> ids: [ { selector: &#39;.spectrum-Checkbox-input&#39;, name: &#39;input&#39;, }, { selector: &#39;.spectrum-Checkbox-box&#39;, name: &#39;box&#39;, }, { selector: &#39;.spectrum-Checkbox-checkmark&#39;, name: &#39;checkmark&#39;, }, { selector: &#39;.spectrum-Checkbox-partialCheckmark&#39;, name: &#39;partialCheckmark&#39;, }, { selector: &#39;.spectrum-Checkbox-label&#39;, name: &#39;label&#39;, }, ],</code-example> <h3 id="properties-and-attributes" class="spectrum-Heading3">Properties and Attributes</h3> <p class="spectrum-Body3">Most of our controls have options that affect how they are rendered. For example, Spectrum supports a number of different kinds of buttons (e.g primary, secondary or call-to-action). <code>spectrum-css</code> supports these visual styles using CSS classes. In web components, we typically support these options using attributes/properties on the component. For example, here is a call-to-action style button.</p> <code-example class="language-html">&lt;sp-button variant=&quot;cta&quot;&gt;CTA&lt;/sp-button&gt;</code-example> <p class="spectrum-Body3">We could conditionally add CSS classes to the elements of the shadow DOM during rendering, but it is much easier to just let the attributes on the DOM node drive the styling directly. In order to facilitate that, the <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/src/button/spectrum-config.js#L23-L47"><code>spectrum-config.js</code> file lets you specify how to map the various <code>spectrum-css</code> classes to CSS that is based on the attributes on the <code>:host</code> of the web component</sp-link>.</p> <code-example class="language-javascript"> attributes: [ { type: &#39;boolean&#39;, selector: &#39;.spectrum-Button--quiet&#39;, }, { type: &#39;boolean&#39;, selector: &#39;:disabled&#39;, }, { type: &#39;enum&#39;, name: &#39;variant&#39;, values: [ &#39;.spectrum-Button--cta&#39;, &#39;.spectrum-Button--primary&#39;, &#39;.spectrum-Button--secondary&#39;, { name: &#39;negative&#39;, selector: &#39;.spectrum-Button--warning&#39;, }, &#39;.spectrum-Button--overBackground&#39;, &#39;.spectrum-Button--secondary&#39;, ], }, ],</code-example> <p class="spectrum-Body3">We support two different kinds of attributes, booleans and enums. Booleans are turned on or off by the presence or absence of the attribute. Enum attributes must be set to one of the allowed values. The <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/src/button/spectrum-button.css#L204-L212">CSS generated will reference the attributes on the <code>host:</code> element directly</sp-link>.</p> <h3 id="class-to-class-mapping" class="spectrum-Heading3">Class to Class Mapping</h3> <p class="spectrum-Body3">In some cases, you will need to retain the <code>spectrum-css</code> classes as classes. An example of that is when you need to apply CSS rules to multiple items in the shadow DOM. In that case, we simply map class names to shorter classnames. There is an <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/src/slider/spectrum-config.js#L91-L96">example of remapping classes in the slider component</sp-link>.</p> <code-example class="language-javacript"> classes: [ { selector: &#39;.spectrum-Slider-track&#39;, name: &#39;track&#39;, }, ],</code-example> <h3 id="slots" class="spectrum-Heading3">Slots</h3> <p class="spectrum-Body3"><sp-link href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot">Slot tags</sp-link> are how we host our child content (light DOM) in our component&#39;s shadow DOM. The <code>spectrum-css</code> for a component sometimes contains rules for laying out the child content. There is a <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/src/button/spectrum-config.js#L49-L54"><code>slots</code> section</sp-link> in the <code>spectrum-config.js</code> file for mapping those rules to the slotted content.</p> <code-example class="language-javascript"> slots: [ { name: &#39;icon&#39;, selector: &#39;.spectrum-Icon&#39;, }, ],</code-example> <p class="spectrum-Body3">The above section tells our CSS processor to map CSS for the <code>.spectrum-Icon</code> class to the content that is being hosted in the <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/src/button/spectrum-button.css#L148-L158">slot with the name <code>icon</code></sp-link>.</p> <div class="headerContainer"><h1 class="spectrum-Heading2">Coding the Component</h1><sp-rule size="large"></sp-rule></div> <hr class="spectrum-Rule spectrum-Rule--large"> <p class="spectrum-Body3">All of the <code>spectrum-web-components</code> are written using the <sp-link href="https://lit-element.polymer-project.org/guide">lit-element</sp-link> framework and <sp-link href="https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html">Typescript</sp-link>. Your best bet is to look at <sp-link href="https://github.com/adobe/spectrum-web-components/tree/master/packages">similar components</sp-link> and match the style.</p> <p class="spectrum-Body3">We have a working specification for the APIs for each of the Spectrum components. If you file an issue for the component that you want to implement, we can provide the necessary specifications for it.</p> <h3 id="documenting-the-component" class="spectrum-Heading3">Documenting the component</h3> <p class="spectrum-Body3">Each component should have a page in the documentation system. The pages are written in <sp-link href="https://www.markdownguide.org/cheat-sheet">Markdown</sp-link>. See one of the <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/documentation/components/button.md">existing pages</sp-link> for an example.</p> <p class="spectrum-Body3">To run the local documentation server, use the command:</p> <code-example>npm run docs:start</code-example><p class="spectrum-Body3">The documentation automatically extracts the properties and attributes from the source code. You should document your component using the <sp-link href="https://github.com/runem/web-component-analyzer#-how-to-document-your-components-using-jsdoc">appropriate jsdoc tags</sp-link>. See <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/src/button/button.ts">button.ts</sp-link> for an example.</p> <h3 id="working-with-storybook" class="spectrum-Heading3">Working with Storybook</h3> <p class="spectrum-Body3">We use <sp-link href="https://storybook.js.org/">Storybook</sp-link> for developing our components. This gives us a rapid way to test our components in various configurations. The best way to start is to copy <sp-link href="https://github.com/adobe/spectrum-web-components/blob/master/stories/button.stories.ts">one of the existing stories</sp-link>.</p> <p class="spectrum-Body3">To run Storybook, use the command:</p> <code-example>npm run storybook</code-example>'},1004:function(e,t){e.exports='<div class="spectrum-Article"><h1 class="spectrum-Heading1">Specification for .spectrum-config.js files</h1></div> <p class="spectrum-Body3">The following is an annotated example that serves to document the format of the spectrum-config.js file. A higher-level explanation may be found <sp-link href="adding-component">here</sp-link>.</p> <div class="headerContainer"><h1 class="spectrum-Heading2">Annotated Sample</h1><sp-rule size="large"></sp-rule></div> <hr class="spectrum-Rule spectrum-Rule--large"> <code-example class="language-javascript">module.exports = { // This is the name that the component has in spectrum-css. If you look // in node_modules/@adobe/spectrum-css/dist/components, what is the name // of the directory that contains the CSS for the component that you are // implementing spectrum: &#39;button&#39;, // A list of the components that we would like to generate CSS for. We can // generate CSS for multiple related components (e.g button and action button) components: [ { // The basename for this component. This will control the naming of the // generated CSS file name: &#39;button&#39;, // Information about the main CSS class for this component. This is the // name of the CSS class in the spectrum-css file that relates to this // component (e.g. .spectrum-Button). You can optionally provide a // shadowSelector which will allow you to map the rules to an element // in your shadow DOM. The default selector for the CSS rules is :host. // If you are mapping to the default host: selector then you can // simply say &quot;host: &#39;.spectrum-Button&#39;&quot; host: { // The selector from spectrum-css for the root of the component selector: &#39;.spectrum-Button&#39;, // The selector in the shadow DOM to map to (defaults to :host) shadowSelector: &#39;#button&#39;, }, // For components that can receive focus, this is the element in the // shadow DOM that should receive focus focus: &#39;#button&#39;, // These are the options for the component that are set using attributes // on the web component (e.g. quiet in &lt;sp-button quiet&gt;Click me&lt;/sp-button&gt;) attributes: [ // Attributes may have a boolean type. In that case, if the attribute // is present, the option is true { // Type of the attribute type: &#39;boolean&#39;, // The selector whos rules should come into effect when the // option is true selector: &#39;.spectrum-Button--quiet&#39;, }, { type: &#39;boolean&#39;, // An example of mapping a pseudo attribute to an attribute // on the web component selector: &#39;:disabled&#39;, }, // Attributes may also be of type enum. In that case, there is // usually a list of CSS classes in spectrum-css, of which only // one should be present at a time. { type: &#39;enum&#39;, // For enums, we need to provide a name here for the attribute // as it is defined in the implementation of the component name: &#39;variant&#39;, // This is a list of possible values for the attribute. If // the option is of the form &quot;.spectrum-Button--cta&quot; where // &quot;.spectrum-Button&quot; is the root CSS class, then we can extract // the enum value name automatically values: [ // This related the enum value &lt;sp-button variant=&quot;cta&quot;&gt; &#39;.spectrum-Button--cta&#39;, &#39;.spectrum-Button--primary&#39;, &#39;.spectrum-Button--secondary&#39;, // If for some reason, we need to override the enum // values name, we can provide an object with the // selector and name explicitly { name: &#39;negative&#39;, selector: &#39;.spectrum-Button--warning&#39;, }, &#39;.spectrum-Button--overBackground&#39;, &#39;.spectrum-Button--secondary&#39;, ], }, ], // This is a list of all of the spectrum-css class names that we // wish to map to ids in the shadow DOM. ids: [ // If the class name follows the patter of starting with the // root class, then we can extract the id automatically. In this // case it would be #label &#39;.spectrum-Button-label&#39;, // We can also explicitly provide the selector and the name { selector: &#39;.spectrum-Button-label&#39;, name: &#39;label&#39; } ], // We can provide a list of classes that we wish to map. It is // preferred to use ids when possible. There are some cases // where it is necessary to use a set CSS rules on multiple // components in the shadow DOM. In that case, you should map // the spectrum-css class to a shorter name classes: [ { // Classname in the original spectrum-css selector: &#39;.spectrum-Slider-track&#39;, // New name to use. This will create the class .track name: &#39;track&#39;, }, ], // A list of slots on our web component that we wish to apply // spectrum-css rules to slots: [ { // The name of the slot (e.g. &lt;slot name=&quot;icon&quot;&gt;) name: &#39;icon&#39;, // The spectrum-css selector who&#39;s rules we wish to apply selector: &#39;.spectrum-Icon&#39;, }, ], // Regular expressions for rules that we wish to exclude from our // processing. There are rules that do not make sense in a web // component, and it is good form to keep our CSS as small as // possible exclude: [/\\.is-disabled/], }, { // A second component specification in the same file name: &#39;action-button&#39;, host: { selector: &#39;.spectrum-ActionButton&#39;, shadowSelector: &#39;#button&#39;, }, ... } ], };</code-example> '},1058:function(e,t,o){"use strict";o.r(t);var s=o(1),n=(o(47),o(73),o(21));const c=o(1002),a=new Map;for(const e of c.keys()){const t=/([a-zA-Z-]+)\.md$/.exec(e)[1],o=Object(n.a)(c(e));a.set(t,o)}var r=o(43),i=o(44);let p,l,u=e=>e;class m extends r.a{static get styles(){return[i.a]}get componentName(){return this.location?`sp-${this.location.params.guide}`:""}render(){let e;return this.location&&this.location.params&&(e=Object(s.d)(p||(p=u` <article class="spectrum-Typography"> ${0} </article> `),a.get(this.location.params.guide))),e||Object(s.d)(l||(l=u``))}}customElements.define("docs-guide",m)},21:function(e,t,o){"use strict";o.d(t,"a",(function(){return n}));var s=o(1);function n(e){const t=[`${e}`];return t.raw=[`${e}`],Object(s.d)(t)}}}]);
//# sourceMappingURL=5.35def018c19fde3094c6.js.map
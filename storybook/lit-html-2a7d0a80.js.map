{"version":3,"file":"lit-html-2a7d0a80.js","sources":["../../../node_modules/lit-html/lib/directive.js","../../../node_modules/lit-html/lib/dom.js","../../../node_modules/lit-html/lib/part.js","../../../node_modules/lit-html/lib/template.js","../../../node_modules/lit-html/lib/template-instance.js","../../../node_modules/lit-html/lib/template-result.js","../../../node_modules/lit-html/lib/parts.js","../../../node_modules/lit-html/lib/default-template-processor.js","../../../node_modules/lit-html/lib/template-factory.js","../../../node_modules/lit-html/lib/render.js","../../../node_modules/lit-html/lit-html.js","../../../node_modules/lit-html/lib/modify-template.js","../../../node_modules/lit-html/lib/shady-render.js","../../../node_modules/lit-html/directives/if-defined.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = this.parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener('test', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener('test', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @module lit-html\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.2.1');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module shady-render\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @module shady-render\n * @preferred\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nconst shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive } from '../lit-html.js';\nconst previousValues = new WeakMap();\n/**\n * For AttributeParts, sets the attribute if the value is defined and removes\n * the attribute if the value is undefined.\n *\n * For other part types, this directive is a no-op.\n */\nexport const ifDefined = directive((value) => (part) => {\n    const previousValue = previousValues.get(part);\n    if (value === undefined && part instanceof AttributePart) {\n        // If the value is undefined, remove the attribute, but only if the value\n        // was previously defined.\n        if (previousValue !== undefined || !previousValues.has(part)) {\n            const name = part.committer.name;\n            part.committer.element.removeAttribute(name);\n        }\n    }\n    else if (value !== previousValue) {\n        part.setValue(value);\n    }\n    previousValues.set(part, value);\n});\n//# sourceMappingURL=if-defined.js.map"],"names":["directives","WeakMap","isDirective","o","has","isCEPolyfill","window","customElements","undefined","polyfillWrapFlushCallback","reparentNodes","container","start","end","before","n","nextSibling","insertBefore","removeNodes","removeChild","noChange","nothing","marker","String","Math","random","slice","nodeMarker","markerRegex","RegExp","boundAttributeSuffix","Template","[object Object]","result","element","parts","nodesToRemove","stack","walker","document","createTreeWalker","content","lastPartIndex","index","partIndex","strings","values","length","node","nextNode","nodeType","hasAttributes","attributes","_length","count","i","endsWith","name","stringForPart","lastAttributeNameRegex","exec","attributeLookupName","toLowerCase","attributeValue","getAttribute","removeAttribute","statics","split","push","type","tagName","currentNode","data","indexOf","parent","parentNode","_strings","lastIndex","_i","insert","s","createMarker","match","createTextNode","_parent","previousSibling","_i2","pop","str","suffix","isTemplatePartActive","part","createComment","TemplateInstance","template","processor","options","__parts","this","setValue","_part","commit","fragment","cloneNode","importNode","nodeIndex","nodeName","_part2","handleTextExpression","insertAfterNode","handleAttributeExpressions","adoptNode","upgrade","commentMarker","TemplateResult","l","html","isCommentBinding","commentOpen","lastIndexOf","attributeMatch","substr","createElement","innerHTML","getHTML","SVGTemplateResult","super","getTemplateElement","svgElement","firstChild","isPrimitive","value","isIterable","Array","isArray","Symbol","iterator","AttributeCommitter","dirty","_createPart","AttributePart","text","v","t","setAttribute","_getValue","committer","directive","NodePart","__pendingValue","startNode","appendChild","endNode","ref","__insert","__commitText","__commitTemplateResult","Node","__commitNode","__commitIterable","clear","valueAsString","templateFactory","update","instance","_clone","itemPart","itemParts","item","appendIntoPart","insertAfterPart","BooleanAttributePart","Error","PropertyCommitter","single","PropertyPart","eventOptionsSupported","addEventListener","removeEventListener","_e","EventPart","eventName","eventContext","__boundHandleEvent","e","handleEvent","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","__options","getOptions","event","call","defaultTemplateProcessor","prefix","templateCache","templateCaches","get","stringsArray","keyString","Map","set","key","join","render","Object","assign","appendInto","svg","walkerNodeFilter","removeNodesFromTemplate","nextActiveIndexInTemplateParts","removeCount","nodesToRemoveInTemplate","currentRemovingNode","forEach","countNodes","startIndex","getTemplateCacheKey","scopeName","compatibleShadyCSSVersion","ShadyCSS","prepareTemplateDom","console","warn","f","shadyTemplateFactory","cacheKey","TEMPLATE_TYPES","shadyRenderSet","Set","prepareTemplateStyles","renderedDOM","add","templateElement","styles","querySelectorAll","condensedStyle","_style","textContent","templates","from","removeStylesFromLitTemplates","refNode","insertCount","walkerIndex","insertNodeIntoTemplate","style","querySelector","nativeShadow","removes","hasRendered","needsScoping","host","firstScopeRender","renderContainer","createDocumentFragment","litRender","delete","styleElement","previousValues","ifDefined","previousValue","args","d"],"mappings":"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"}
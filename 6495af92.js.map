{"version":3,"file":"6495af92.js","sources":["../../../node_modules/@lit-labs/virtualizer/layouts/shared/SizeCache.js","../../../node_modules/@lit-labs/virtualizer/layouts/flow.js"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport class SizeCache {\n    constructor(config) {\n        this._map = new Map();\n        this._roundAverageSize = false;\n        this.totalSize = 0;\n        if ((config === null || config === void 0 ? void 0 : config.roundAverageSize) === true) {\n            this._roundAverageSize = true;\n        }\n    }\n    set(index, value) {\n        const prev = this._map.get(index) || 0;\n        this._map.set(index, value);\n        this.totalSize += value - prev;\n    }\n    get averageSize() {\n        if (this._map.size > 0) {\n            const average = this.totalSize / this._map.size;\n            return this._roundAverageSize ? Math.round(average) : average;\n        }\n        return 0;\n    }\n    getSize(index) {\n        return this._map.get(index);\n    }\n    clear() {\n        this._map.clear();\n        this.totalSize = 0;\n    }\n}\n//# sourceMappingURL=SizeCache.js.map","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { SizeCache } from './shared/SizeCache.js';\nimport { BaseLayout, dim1 } from './shared/BaseLayout.js';\nexport const flow = (config) => Object.assign({\n    type: FlowLayout,\n}, config);\nfunction leadingMargin(direction) {\n    return direction === 'horizontal' ? 'marginLeft' : 'marginTop';\n}\nfunction trailingMargin(direction) {\n    return direction === 'horizontal' ? 'marginRight' : 'marginBottom';\n}\nfunction offset(direction) {\n    return direction === 'horizontal' ? 'xOffset' : 'yOffset';\n}\nfunction collapseMargins(a, b) {\n    const m = [a, b].sort();\n    return m[1] <= 0 ? Math.min(...m) : m[0] >= 0 ? Math.max(...m) : m[0] + m[1];\n}\nclass MetricsCache {\n    constructor() {\n        this._childSizeCache = new SizeCache();\n        this._marginSizeCache = new SizeCache();\n        this._metricsCache = new Map();\n    }\n    update(metrics, direction) {\n        var _a, _b;\n        const marginsToUpdate = new Set();\n        Object.keys(metrics).forEach((key) => {\n            const k = Number(key);\n            this._metricsCache.set(k, metrics[k]);\n            this._childSizeCache.set(k, metrics[k][dim1(direction)]);\n            marginsToUpdate.add(k);\n            marginsToUpdate.add(k + 1);\n        });\n        for (const k of marginsToUpdate) {\n            const a = ((_a = this._metricsCache.get(k)) === null || _a === void 0 ? void 0 : _a[leadingMargin(direction)]) || 0;\n            const b = ((_b = this._metricsCache.get(k - 1)) === null || _b === void 0 ? void 0 : _b[trailingMargin(direction)]) || 0;\n            this._marginSizeCache.set(k, collapseMargins(a, b));\n        }\n    }\n    get averageChildSize() {\n        return this._childSizeCache.averageSize;\n    }\n    get totalChildSize() {\n        return this._childSizeCache.totalSize;\n    }\n    get averageMarginSize() {\n        return this._marginSizeCache.averageSize;\n    }\n    get totalMarginSize() {\n        return this._marginSizeCache.totalSize;\n    }\n    getLeadingMarginValue(index, direction) {\n        var _a;\n        return ((_a = this._metricsCache.get(index)) === null || _a === void 0 ? void 0 : _a[leadingMargin(direction)]) || 0;\n    }\n    getChildSize(index) {\n        return this._childSizeCache.getSize(index);\n    }\n    getMarginSize(index) {\n        return this._marginSizeCache.getSize(index);\n    }\n    clear() {\n        this._childSizeCache.clear();\n        this._marginSizeCache.clear();\n        this._metricsCache.clear();\n    }\n}\nexport class FlowLayout extends BaseLayout {\n    constructor() {\n        super(...arguments);\n        /**\n         * Initial estimate of item size\n         */\n        this._itemSize = { width: 100, height: 100 };\n        /**\n         * Indices of children mapped to their (position and length) in the scrolling\n         * direction. Used to keep track of children that are in range.\n         */\n        this._physicalItems = new Map();\n        /**\n         * Used in tandem with _physicalItems to track children in range across\n         * reflows.\n         */\n        this._newPhysicalItems = new Map();\n        /**\n         * Width and height of children by their index.\n         */\n        this._metricsCache = new MetricsCache();\n        /**\n         * anchorIdx is the anchor around which we reflow. It is designed to allow\n         * jumping to any point of the scroll size. We choose it once and stick with\n         * it until stable. _first and _last are deduced around it.\n         */\n        this._anchorIdx = null;\n        /**\n         * Position in the scrolling direction of the anchor child.\n         */\n        this._anchorPos = null;\n        /**\n         * Whether all children in range were in range during the previous reflow.\n         */\n        this._stable = true;\n        this._measureChildren = true;\n        this._estimate = true;\n    }\n    // protected _defaultConfig: BaseLayoutConfig = Object.assign({}, super._defaultConfig, {\n    // })\n    // constructor(config: Layout1dConfig) {\n    //   super(config);\n    // }\n    get measureChildren() {\n        return this._measureChildren;\n    }\n    /**\n     * Determine the average size of all children represented in the sizes\n     * argument.\n     */\n    updateItemSizes(sizes) {\n        this._metricsCache.update(sizes, this.direction);\n        // if (this._nMeasured) {\n        // this._updateItemSize();\n        this._scheduleReflow();\n        // }\n    }\n    /**\n     * Set the average item size based on the total length and number of children\n     * in range.\n     */\n    // _updateItemSize() {\n    //   // Keep integer values.\n    //   this._itemSize[this._sizeDim] = this._metricsCache.averageChildSize;\n    // }\n    _getPhysicalItem(idx) {\n        var _a;\n        return (_a = this._newPhysicalItems.get(idx)) !== null && _a !== void 0 ? _a : this._physicalItems.get(idx);\n    }\n    _getSize(idx) {\n        const item = this._getPhysicalItem(idx);\n        return item && this._metricsCache.getChildSize(idx);\n    }\n    _getAverageSize() {\n        return this._metricsCache.averageChildSize || this._itemSize[this._sizeDim];\n    }\n    _estimatePosition(idx) {\n        const c = this._metricsCache;\n        if (this._first === -1 || this._last === -1) {\n            return (c.averageMarginSize +\n                idx * (c.averageMarginSize + this._getAverageSize()));\n        }\n        else {\n            if (idx < this._first) {\n                const delta = this._first - idx;\n                const refItem = this._getPhysicalItem(this._first);\n                return (refItem.pos -\n                    (c.getMarginSize(this._first - 1) || c.averageMarginSize) -\n                    (delta * c.averageChildSize + (delta - 1) * c.averageMarginSize));\n            }\n            else {\n                const delta = idx - this._last;\n                const refItem = this._getPhysicalItem(this._last);\n                return (refItem.pos +\n                    (c.getChildSize(this._last) || c.averageChildSize) +\n                    (c.getMarginSize(this._last) || c.averageMarginSize) +\n                    delta * (c.averageChildSize + c.averageMarginSize));\n            }\n        }\n    }\n    /**\n     * Returns the position in the scrolling direction of the item at idx.\n     * Estimates it if the item at idx is not in the DOM.\n     */\n    _getPosition(idx) {\n        var _a;\n        const item = this._getPhysicalItem(idx);\n        const { averageMarginSize } = this._metricsCache;\n        return idx === 0\n            ? (_a = this._metricsCache.getMarginSize(0)) !== null && _a !== void 0 ? _a : averageMarginSize\n            : item\n                ? item.pos\n                : this._estimatePosition(idx);\n    }\n    _calculateAnchor(lower, upper) {\n        if (lower <= 0) {\n            return 0;\n        }\n        if (upper > this._scrollSize - this._viewDim1) {\n            return this.items.length - 1;\n        }\n        return Math.max(0, Math.min(this.items.length - 1, Math.floor((lower + upper) / 2 / this._delta)));\n    }\n    _getAnchor(lower, upper) {\n        if (this._physicalItems.size === 0) {\n            return this._calculateAnchor(lower, upper);\n        }\n        if (this._first < 0) {\n            return this._calculateAnchor(lower, upper);\n        }\n        if (this._last < 0) {\n            return this._calculateAnchor(lower, upper);\n        }\n        const firstItem = this._getPhysicalItem(this._first), lastItem = this._getPhysicalItem(this._last), firstMin = firstItem.pos, lastMin = lastItem.pos, lastMax = lastMin + this._metricsCache.getChildSize(this._last);\n        if (lastMax < lower) {\n            // Window is entirely past physical items, calculate new anchor\n            return this._calculateAnchor(lower, upper);\n        }\n        if (firstMin > upper) {\n            // Window is entirely before physical items, calculate new anchor\n            return this._calculateAnchor(lower, upper);\n        }\n        // Window contains a physical item\n        // Find one, starting with the one that was previously first visible\n        let candidateIdx = this._firstVisible - 1;\n        let cMax = -Infinity;\n        while (cMax < lower) {\n            const candidate = this._getPhysicalItem(++candidateIdx);\n            cMax = candidate.pos + this._metricsCache.getChildSize(candidateIdx);\n        }\n        return candidateIdx;\n    }\n    /**\n     * Updates _first and _last based on items that should be in the current\n     * viewed range.\n     */\n    _getActiveItems() {\n        if (this._viewDim1 === 0 || this.items.length === 0) {\n            this._clearItems();\n        }\n        else {\n            this._getItems();\n        }\n    }\n    /**\n     * Sets the range to empty.\n     */\n    _clearItems() {\n        this._first = -1;\n        this._last = -1;\n        this._physicalMin = 0;\n        this._physicalMax = 0;\n        const items = this._newPhysicalItems;\n        this._newPhysicalItems = this._physicalItems;\n        this._newPhysicalItems.clear();\n        this._physicalItems = items;\n        this._stable = true;\n    }\n    /*\n     * Updates _first and _last based on items that should be in the given range.\n     */\n    _getItems() {\n        var _a, _b;\n        const items = this._newPhysicalItems;\n        this._stable = true;\n        let lower, upper;\n        // The anchorIdx is the anchor around which we reflow. It is designed to\n        // allow jumping to any point of the scroll size. We choose it once and\n        // stick with it until stable. first and last are deduced around it.\n        // If we have a pinned item, we anchor on it\n        if (this.pin !== null) {\n            const { index } = this.pin;\n            this._anchorIdx = index;\n            this._anchorPos = this._getPosition(index);\n        }\n        // Determine the lower and upper bounds of the region to be\n        // rendered, relative to the viewport\n        lower = this._scrollPosition - this._overhang; //leadingOverhang;\n        upper = this._scrollPosition + this._viewDim1 + this._overhang; // trailingOverhang;\n        if (upper < 0 || lower > this._scrollSize) {\n            this._clearItems();\n            return;\n        }\n        // If we are scrolling to a specific index or if we are doing another\n        // pass to stabilize a previously started reflow, we will already\n        // have an anchor. If not, establish an anchor now.\n        if (this._anchorIdx === null || this._anchorPos === null) {\n            this._anchorIdx = this._getAnchor(lower, upper);\n            this._anchorPos = this._getPosition(this._anchorIdx);\n        }\n        let anchorSize = this._getSize(this._anchorIdx);\n        if (anchorSize === undefined) {\n            this._stable = false;\n            anchorSize = this._getAverageSize();\n        }\n        const anchorLeadingMargin = (_a = this._metricsCache.getMarginSize(this._anchorIdx)) !== null && _a !== void 0 ? _a : this._metricsCache.averageMarginSize;\n        const anchorTrailingMargin = (_b = this._metricsCache.getMarginSize(this._anchorIdx + 1)) !== null && _b !== void 0 ? _b : this._metricsCache.averageMarginSize;\n        if (this._anchorIdx === 0) {\n            this._anchorPos = anchorLeadingMargin;\n        }\n        if (this._anchorIdx === this.items.length - 1) {\n            this._anchorPos = this._scrollSize - anchorTrailingMargin - anchorSize;\n        }\n        // Anchor might be outside bounds, so prefer correcting the error and keep\n        // that anchorIdx.\n        let anchorErr = 0;\n        if (this._anchorPos + anchorSize + anchorTrailingMargin < lower) {\n            anchorErr = lower - (this._anchorPos + anchorSize + anchorTrailingMargin);\n        }\n        if (this._anchorPos - anchorLeadingMargin > upper) {\n            anchorErr = upper - (this._anchorPos - anchorLeadingMargin);\n        }\n        if (anchorErr) {\n            this._scrollPosition -= anchorErr;\n            lower -= anchorErr;\n            upper -= anchorErr;\n            this._scrollError += anchorErr;\n        }\n        items.set(this._anchorIdx, { pos: this._anchorPos, size: anchorSize });\n        this._first = this._last = this._anchorIdx;\n        this._physicalMin = this._anchorPos - anchorLeadingMargin;\n        this._physicalMax = this._anchorPos + anchorSize + anchorTrailingMargin;\n        while (this._physicalMin > lower && this._first > 0) {\n            let size = this._getSize(--this._first);\n            if (size === undefined) {\n                this._stable = false;\n                size = this._getAverageSize();\n            }\n            let margin = this._metricsCache.getMarginSize(this._first);\n            if (margin === undefined) {\n                this._stable = false;\n                margin = this._metricsCache.averageMarginSize;\n            }\n            this._physicalMin -= size;\n            const pos = this._physicalMin;\n            items.set(this._first, { pos, size });\n            this._physicalMin -= margin;\n            if (this._stable === false && this._estimate === false) {\n                break;\n            }\n        }\n        while (this._physicalMax < upper && this._last < this.items.length - 1) {\n            let size = this._getSize(++this._last);\n            if (size === undefined) {\n                this._stable = false;\n                size = this._getAverageSize();\n            }\n            let margin = this._metricsCache.getMarginSize(this._last);\n            if (margin === undefined) {\n                this._stable = false;\n                margin = this._metricsCache.averageMarginSize;\n            }\n            const pos = this._physicalMax;\n            items.set(this._last, { pos, size });\n            this._physicalMax += size + margin;\n            if (!this._stable && !this._estimate) {\n                break;\n            }\n        }\n        // This handles the cases where we were relying on estimated sizes.\n        const extentErr = this._calculateError();\n        if (extentErr) {\n            this._physicalMin -= extentErr;\n            this._physicalMax -= extentErr;\n            this._anchorPos -= extentErr;\n            this._scrollPosition -= extentErr;\n            items.forEach((item) => (item.pos -= extentErr));\n            this._scrollError += extentErr;\n        }\n        if (this._stable) {\n            this._newPhysicalItems = this._physicalItems;\n            this._newPhysicalItems.clear();\n            this._physicalItems = items;\n        }\n    }\n    _calculateError() {\n        if (this._first === 0) {\n            return this._physicalMin;\n        }\n        else if (this._physicalMin <= 0) {\n            return this._physicalMin - this._first * this._delta;\n        }\n        else if (this._last === this.items.length - 1) {\n            return this._physicalMax - this._scrollSize;\n        }\n        else if (this._physicalMax >= this._scrollSize) {\n            return (this._physicalMax -\n                this._scrollSize +\n                (this.items.length - 1 - this._last) * this._delta);\n        }\n        return 0;\n    }\n    _reflow() {\n        const { _first, _last } = this;\n        super._reflow();\n        if ((this._first === -1 && this._last == -1) ||\n            (this._first === _first && this._last === _last)) {\n            this._resetReflowState();\n        }\n    }\n    _resetReflowState() {\n        this._anchorIdx = null;\n        this._anchorPos = null;\n        this._stable = true;\n    }\n    _updateScrollSize() {\n        const { averageMarginSize } = this._metricsCache;\n        this._scrollSize = Math.max(1, this.items.length * (averageMarginSize + this._getAverageSize()) +\n            averageMarginSize);\n    }\n    /**\n     * Returns the average size (precise or estimated) of an item in the scrolling direction,\n     * including any surrounding space.\n     */\n    get _delta() {\n        const { averageMarginSize } = this._metricsCache;\n        return this._getAverageSize() + averageMarginSize;\n    }\n    /**\n     * Returns the top and left positioning of the item at idx.\n     */\n    _getItemPosition(idx) {\n        var _a;\n        return {\n            [this._positionDim]: this._getPosition(idx),\n            [this._secondaryPositionDim]: 0,\n            [offset(this.direction)]: -((_a = this._metricsCache.getLeadingMarginValue(idx, this.direction)) !== null && _a !== void 0 ? _a : this._metricsCache.averageMarginSize),\n        };\n    }\n    /**\n     * Returns the height and width of the item at idx.\n     */\n    _getItemSize(idx) {\n        return {\n            [this._sizeDim]: this._getSize(idx) || this._getAverageSize(),\n            [this._secondarySizeDim]: this._itemSize[this._secondarySizeDim],\n        };\n    }\n    _viewDim2Changed() {\n        this._metricsCache.clear();\n        this._scheduleReflow();\n    }\n}\n//# sourceMappingURL=flow.js.map"],"names":["SizeCache","constructor","config","this","_map","Map","_roundAverageSize","totalSize","roundAverageSize","set","index","value","prev","get","averageSize","size","average","Math","round","getSize","clear","leadingMargin","direction","trailingMargin","collapseMargins","a","b","sort","m","min","max","MetricsCache","_childSizeCache","_marginSizeCache","_metricsCache","update","metrics","_a","_b","marginsToUpdate","Object","keys","forEach","key","k","Number","dim1","add","averageChildSize","totalChildSize","averageMarginSize","totalMarginSize","getLeadingMarginValue","getChildSize","getMarginSize","FlowLayout","BaseLayout","super","arguments","_itemSize","width","height","_physicalItems","_newPhysicalItems","_anchorIdx","_anchorPos","_stable","_measureChildren","_estimate","updateItemSizes","sizes","_scheduleReflow","_getPhysicalItem","idx","_getSize","_getAverageSize","_sizeDim","_estimatePosition","c","_first","_last","delta","pos","_getPosition","item","_calculateAnchor","lower","upper","_scrollSize","_viewDim1","items","length","floor","_delta","_getAnchor","firstItem","lastItem","firstMin","candidateIdx","_firstVisible","cMax","Infinity","_getActiveItems","_clearItems","_getItems","_physicalMin","_physicalMax","pin","_scrollPosition","_overhang","anchorSize","undefined","anchorLeadingMargin","anchorTrailingMargin","anchorErr","_scrollError","margin","extentErr","_calculateError","_reflow","_resetReflowState","_updateScrollSize","_getItemPosition","_positionDim","_secondaryPositionDim","_getItemSize","_secondarySizeDim","_viewDim2Changed"],"mappings":"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","x_google_ignoreList":[0,1]}
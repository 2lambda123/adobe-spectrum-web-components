const e=Symbol("element resolver updated");class t{constructor(e,{selector:t}={selector:""}){this._element=null,this._selector="",this.mutationCallback=e=>{let t=!1;e.forEach((e=>{if(!t){if("childList"===e.type){const s=this.element&&[...e.removedNodes].includes(this.element),l=!!this.selector&&[...e.addedNodes].some((e=>{var t;return null==(t=null==e?void 0:e.matches)?void 0:t.call(e,this.selector)}));t=t||s||l}if("attributes"===e.type){const s=e.target===this.element,l=!!this.selector&&e.target.matches(this.selector);t=t||s||l}}})),t&&this.resolveElement()},this.host=e,this.selector=t,this.observer=new MutationObserver(this.mutationCallback),this.host.addController(this)}get element(){return this._element}set element(t){if(t===this.element)return;const s=this.element;this._element=t,this.host.requestUpdate(e,s)}get selector(){return this._selector}set selector(e){e!==this.selector&&(this.releaseElement(),this._selector=e,this.resolveElement())}hostConnected(){this.resolveElement(),this.observer.observe(this.host.getRootNode(),{subtree:!0,childList:!0,attributes:!0})}hostDisconnected(){this.releaseElement(),this.observer.disconnect()}resolveElement(){if(!this.selector)return void this.releaseElement();const e=this.host.getRootNode();this.element=e.querySelector(this.selector)}releaseElement(){this.element=null}}export{t as E,e};
//# sourceMappingURL=e2d01fb9.js.map
